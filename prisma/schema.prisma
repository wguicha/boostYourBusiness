// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NEW: Role definition for users within a business
enum Role {
  OWNER
  EMPLOYEE
}

// NEW: Business model
model Business {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to users (many-to-many)
  users     BusinessUser[]
  // Relation to products (one-to-many)
  products  Product[]
  // Relation to sales (one-to-many)
  sales     Sale[]
}

// NEW: Join table for the many-to-many relationship between Business and User
model BusinessUser {
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @default(OWNER)

  assignedAt DateTime @default(now())
  assignedBy String? // Optional: to track who assigned the user

  @@id([businessId, userId])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal
  quantity    Int
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  SaleItem    SaleItem[]

  // ADDED: Relation to a Business
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model Sale {
  id            String   @id @default(cuid())
  totalAmount   Decimal
  paymentMethod String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  items         SaleItem[]

  // ADDED: Relation to a Business
  businessId    String
  business      Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model SaleItem {
  id          String  @id @default(cuid())
  quantity    Int
  priceAtSale Decimal

  saleId    String
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Restrict) // Use Restrict to prevent product deletion if it's in a sale
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  // REMOVED: businessName is no longer needed here
  // businessName  String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  // ADDED: Relation to businesses (many-to-many)
  businesses BusinessUser[]
}

model VerificationToken {
  identifier String   @id @default(cuid())
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}